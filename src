package SpringAOP;

import java.lang.reflect.Method;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.springframework.cglib.proxy.Callback;
import org.springframework.cglib.proxy.Enhancer;
import org.springframework.cglib.proxy.MethodProxy;
//cglib代理
public class UserServiceProxyFactory2 implements MethodInterceptor {
	public UserService getUserServiceProxy() {
		//生成代理对象
		Enhancer en = new Enhancer();
		//设置对谁进行代理
		en.setSuperclass(UserServiceImpl.class);
		//代理要做什么
		 en.setCallback((Callback) this);
		//创建代理对象
		UserService us = (UserService)en.create();
		return us;
	}

	@Override
	public Object invoke(MethodInvocation arg0) throws Throwable {
		// TODO Auto-generated method stub
		return null;
	}
	//@Override
	public Object intercept(Object proxyobj,Method method,Object[]arg,MethodProxy methodProxy) throws Throwable{
		//打开事务
		System.out.println("打开事务");
		//调用原方法
		Object returnValue = methodProxy.invoke(proxyobj, arg);
		//提交事务
		System.out.println("提交事务");
		return returnValue;
		
		
	}
}
